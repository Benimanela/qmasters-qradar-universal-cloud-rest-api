<Workflow name="Qmasters Gravitee workflow for QRadar" version="1.0" xmlns="http://qradar.ibm.com/UniversalCloudRESTAPI/Workflow/V2">
    <Parameters>
        <Parameter name="api_host" label="Host Name" required="true" />
        <Parameter name="api_token" label="API Token" required="true" secret="true" />
        <Parameter name="org_id" label="Organization ID" required="false" default="DEFAULT" />
        <Parameter name="env_id" label="Environment ID" required="false" default="DEFAULT"/>
        <Parameter name="identifier" label="Identifier" required="false" default="Gravitee API"/>
        <Parameter name="filter_environment" label="Environment Filter" required="false" />
        <Parameter name="filter_type" label="Type Filter" required="false" />
        <Parameter name="filter_event" label="Event Filter" required="false" />
        <Parameter name="filter_application" label="Application Filter" required="false" />
        <Parameter name="filter_api" label="API Filter" required="false" />
        <Parameter name="max_results" label="Page Size" required="false" default="100" />
        <Parameter name="start_time" label="Start Time" required="false" />
    </Parameters>

    <Actions>
        <!-- Clear the log source status before a new workflow run starts -->
        <Log type="INFO" message="Gravitee API: Starting workflow execution." />
        <ClearStatus />

        <!-- Initialize the risingValue filter for the first run. -->
        <If condition="count(/start_time) > 0" >
            <Initialize path="/bookmark" value="${/start_time}"/>
        </If>
        <Else>
            <Initialize path="/bookmark" value="${time() - 604800000}" />
        </Else>

        <Log type="INFO" message="Gravitee API: Bookmark: ${/bookmark}." />

        <!-- Get Audit Logs -->
        <Log type="INFO" message="Gravitee API: Fetching audit logs from API." />
        <CallEndpoint url="${/api_host}/organizations/${/org_id}/environments/${/env_id}/audit" method="GET" savePath="/get_audit_logs" >
            <QueryParameter name="from" value="${/bookmark}" />
            <QueryParameter name="size" value="${/max_results}" />
            <QueryParameter name="type" value="${/filter_type}" omitIfEmpty="true" />
            <QueryParameter name="environment" value="${/filter_environment}" omitIfEmpty="true" />
            <QueryParameter name="api" value="${/filter_api}" omitIfEmpty="true" />
            <QueryParameter name="application" value="${/filter_application}" omitIfEmpty="true" />
            <QueryParameter name="event" value="${/filter_event}" omitIfEmpty="true" />
            <RequestHeader name="Authorization" value="Bearer ${/api_token}" />
            <RequestHeader name="Accept" value="application/json" />
            <RequestHeader name="Content-Type" value="application/json" />
        </CallEndpoint>

        <!-- Handle Errors -->
        <Log type="INFO" message="Gravitee API: Checking API response status." />
        <If condition="/get_audit_logs/status_code != 200">
            <If condition="/get_audit_logs/status_code = 401" >
                <Log type="ERROR" message="Invalid token or token expired." />
                <Abort reason="Invalid token or token expired" />
            </If>

            <If condition="/get_audit_logs/status_code = 400" >
                <Log type="ERROR" message="Bad input parameter. ${/get_audit_logs/body/message}" />
                <Abort reason="Bad input parameter. ${/get_audit_logs/body/message}" />
            </If>

            <If condition="/get_audit_logs/status_code >= 500" >
                <Log type="ERROR" message="Internal server error." />
                <Abort reason="Internal server error." />
            </If>

            <Log type="ERROR" message="Unexpected error: ${/get_audit_logs}" />
            <Abort reason="Gravitee Audit API abort reason:  ${/get_audit_logs}" />
        </If>

        <!-- Post Events, if any -->
        <If condition="/get_audit_logs/body/pageElements > 0">
            <Log type="INFO" message="Gravitee API: Audit logs fetched successfully. Posting events." />
            <PostEvents path="/get_audit_logs/body/content" source="${/identifier}" />

            <!-- Update the bookmark -->
            <Log type="INFO" message="Gravitee API: MAX: ${/get_audit_logs/body/content/createdAt}." />
            <Set path="/last_event_time" value="${max(/get_audit_logs/body/content/createdAt)}" />
            <Log type="INFO" message="Gravitee API: last_event_time ${/last_event_time}." />
            <Set path="/bookmark" value="${/last_event_time + 1}" />
            <Log type="INFO" message="Gravitee API: Bookmark updated to: ${/bookmark}." />
        </If>
        <Else>
            <Log type="INFO" message="Gravitee API: The connection to the Gravitee API was successfully established; however, there are no new events available for retrieval at this moment. The last event received was at: ${/bookmark} (UTC)." />
        </Else>
    </Actions>

    <Tests>
        <DNSResolutionTest host="${/api_host}" />
        <TCPConnectionTest host="${/api_host}" />
        <SSLHandshakeTest host="${/api_host}" />
        <HTTPConnectionThroughProxyTest url="${/api_host}" expectedResponseStatus="404" />
    </Tests>
</Workflow>
