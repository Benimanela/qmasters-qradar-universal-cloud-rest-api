<Workflow name="Qmasters ServiceNow" version="1.0" xmlns="http://qradar.ibm.com/UniversalCloudRESTAPI/Workflow/V2">
    <Parameters>
        <Parameter name="identifier" label="Log Source Identifier" description="The log source identifier to post the events to." required="true" />
		<Parameter name="instance_name" label="Instance Name" description="ServiceNow instance name." required="true" />
		<Parameter name="username" label="Username" description="ServiceNow user name." required="true" />
		<Parameter name="password" label="API Secret" description="ServiceNow user's password." required="true" secret="true" />
		<Parameter name="client_id" label="Client ID" description="ServiceNow client ID." required="true" secret="true" />
		<Parameter name="client_secret" label="Client secret" description="ServiceNow client secret." required="true" secret="true" />
        <Parameter name="time_zone" label="Time Zone" description="The timezone to be used." default="UTC" />
        <Parameter name="events_per_fetch" label="Events Per Fetch" description="Max number of records to return per fetch. Note: a large fetch may cause timeout errors." default="100" />
        <Parameter name="initial_fetch_period" label="Initial Event Fetch Period in Days" description="Number of days in the past from which events will be initially retrieved." default="7" />
        <Parameter name="table_to_fetch" label="Table to Fetch" description="Table name to fetch events from." required="true" />
        <Parameter name="pagination_time_field" label="Pagination Time Field" description="The updated time field name for pagination." default="sys_updated_on" required="true" />
        <Parameter name="sleep_time_in_seconds" label="Sleep Time in Seconds" description="The downtime for the connector after it is in sync with the server (Min: 0)." default="20" />
    </Parameters>
    <Actions>
		<!-- Clear the log source status before a new workflow run starts. -->
        <ClearStatus />
        <Set path="/fetch_counter" value="1" />
        <Set path="/events_count" value="0" />
        <Set path="/sleep_time" value="${/sleep_time_in_seconds * 1000}"/>
        <Initialize path="/time_format" value="yyyy-MM-dd HH:mm:ss" />

        <!-- Initialize the last updated time filter for the first run. -->
        <Initialize path="/bookmark" value="${time() - /initial_fetch_period * 86400 * 1000}" />

        <Set path="/log_message" value="[ServiceNow]: The '${/pagination_time_field}' time for '${/table_to_fetch}' to be fetched is: ${/bookmark}" />
        <PostEvent path="/log_message" source="${/identifier}" />
        <Log type="INFO" message="${/log_message}" />

        <Set path="/log_message" value="[ServiceNow]: Authenticating, fetching bearer token..." />
        <PostEvent path="/log_message" source="${/identifier}" />
        <Log type="INFO" message="${/log_message}" />

		<!-- Get new token from ServiceNow. -->
        <CallEndpoint url="https://${/instance_name}.service-now.com/oauth_token.do" method="POST" savePath="/response" >
            <!-- <SSLConfiguration allowUntrustedServerCertificate="true" /> -->
            <UrlEncodedFormRequestBody>
                <Parameter name="grant_type" value="password" />
                <Parameter name="client_id" value="${/client_id}" />
                <Parameter name="client_secret" value="${/client_secret}" />
                <Parameter name="username" value="${/username}" />
                <Parameter name="password" value="${/password}" />
            </UrlEncodedFormRequestBody>
        </CallEndpoint>

        <!-- Handle token generation error. -->
        <If condition="/response/status_code != 200">
            <Set path="/log_message" value="[ServiceNow]: status code ${/response/status_code}, abort to generate new token. Reason: ${/response/body}" />
            <PostEvent path="/log_message" source="${/identifier}" />
            <Log type="ERROR" message="${/log_message}" />

            <Abort reason="${/response}" />
        </If>

        <Set path="/log_message" value="[ServiceNow]: Bearer token received!" />
        <PostEvent path="/log_message" source="${/identifier}" />
        <Log type="INFO" message="${/log_message}" />

        <!-- Save the bearer token. -->
		<Set path="/bearer_token" value="${/response/body/access_token}" />

        <!-- Pagination handling: aslong as events are returned, keep fetching data. -->
        <While condition="true">
            <Set path="/start_time" value="${time()}" />

            <Set path="/log_message" value="[ServiceNow]: Running fetch number ${/fetch_counter} for '${/table_to_fetch}'..." />
            <PostEvent path="/log_message" source="${/identifier}" />
            <Log type="INFO" message="${/log_message}" />

            <!-- Get the reports. -->
            <CallEndpoint url="https://${/instance_name}.service-now.com/api/now/table/${/table_to_fetch}" method="GET" savePath="/response" >
                <!-- <SSLConfiguration allowUntrustedServerCertificate="true" /> -->
                <BearerAuthentication token="${/bearer_token}" />
                <QueryParameter name="sysparm_limit" value="${/events_per_fetch}" />
                <QueryParameter name="sysparm_query" value="'${/pagination_time_field}':'${/bookmark}'" />
            </CallEndpoint>

            <If condition="/response/status_code = 200">
                <!-- Handle a succesful response. -->
                <Set path="/events" value="${/response/body/result}" />
                <Set path="/events_count" value="${count(/events)}" />
                <Set path="/fetch_counter" value="${/fetch_counter + 1}" />

                <Set path="/log_message" value="[ServiceNow]: ${/events_count} events for were fetched for '${/table_to_fetch}'." />
                <PostEvent path="/log_message" source="${/identifier}" />
                <Log type="INFO" message="${/log_message}" />

                <!-- If there were any events, post them and update the last updated time to the latest one. -->
                <If condition="${/events_count} > 0">

                    <Set path="/log_message" value="[ServiceNow]: Posting fetched events..." />
                    <PostEvent path="/log_message" source="${/identifier}" />
                    <Log type="INFO" message="${/log_message}" />

                    <PostEvents path="/events" source="${/identifier}" />
                    <!-- Update the last updated time for next run. -->
                    <Set path="/last_index" value="${/events_count - 1}"/>

                    <ParseDate pattern="${/time_format}" timeZone="${/time_zone}" date="${/events[${/last_index}]/${/pagination_time_field}}" savePath="/last_bookmark" />
                    <FormatDate pattern="${/time_format}" timeZone="${/time_zone}" time="${/last_bookmark}" savePath="/bookmark" />
                    <ParseDate pattern="${/time_format}" timeZone="${/time_zone}" date="${/bookmark}" savePath="/bookmark" />

                    <Set path="/log_message" value="[ServiceNow]: '${/pagination_time_field}' time for '${/table_to_fetch}' updated to: ${/bookmark}" />
                    <PostEvent path="/log_message" source="${/identifier}" />
                    <Log type="INFO" message="${/log_message}" />
                </If>

                <Set path="/log_message" value="[ServiceNow]: Done fetch period, total time in milliseconds is: ${time() - /start_time}" />
                <PostEvent path="/log_message" source="${/identifier}" />
                <Log type="INFO" message="${/log_message}" />

                <If condition="${/events_per_fetch} > ${/events_count}">
                    <Set path="/log_message" value="[ServiceNow]: Connecter is in sync with ServiceNow server, reseting fetch counter and going to sleep for ${/sleep_time_in_seconds} seconds..." />
                    <PostEvent path="/log_message" source="${/identifier}" />
                    <Log type="INFO" message="${/log_message}" />

                    <Set path="/fetch_counter" value="1" />
                    <Sleep duration="${/sleep_time}" />
                </If>
            </If>
            <ElseIf condition="/response/status_code = 401">
                <!-- If the bearer token has expired fetch a new one.  -->
                <Set path="/log_message" value="[ServiceNow]: Bearer token expired, fetching new token..." />
                <PostEvent path="/log_message" source="${/identifier}" />
                <Log type="INFO" message="${/log_message}" />

                <!-- Get new token from ServiceNow. -->
                <CallEndpoint url="https://${/instance_name}.service-now.com/oauth_token.do" method="POST" savePath="/response" >
                    <!-- <SSLConfiguration allowUntrustedServerCertificate="true" /> -->
                    <UrlEncodedFormRequestBody>
                        <Parameter name="grant_type" value="password" />
                        <Parameter name="client_id" value="${/client_id}" />
                        <Parameter name="client_secret" value="${/client_secret}" />
                        <Parameter name="username" value="${/username}" />
                        <Parameter name="password" value="${/password}" />
                    </UrlEncodedFormRequestBody>
                </CallEndpoint>

                <!-- Handle token generation error. -->
                <If condition="/response/status_code != 200">
                    <Set path="/log_message" value="[ServiceNow]: status code ${/response/status_code}, abort to generate new token. Reason: ${/response/body}" />
                    <PostEvent path="/log_message" source="${/identifier}" />
                    <Log type="ERROR" message="${/log_message}" />

                    <Abort reason="${/response}" />
                </If>

                <Set path="/log_message" value="[ServiceNow]: Bearer token received!" />
                <PostEvent path="/log_message" source="${/identifier}" />
                <Log type="INFO" message="${/log_message}" />

                <!-- Save the bearer token. -->
                <Set path="/bearer_token" value="${/response/body/access_token}" />
            </ElseIf>
            <Else>
                <Set path="/log_message" value="ServiceNow - status code ${/response/status_code}, abort at get ${/table_to_fetch} reports. Reason: ${/response/body}" />
                <PostEvent path="/log_message" source="${/identifier}" />
                <Log type="INFO" message="${/log_message}" />

                <Abort reason="${/response}" />
            </Else>
        </While>
	</Actions>

    <Tests>
        <DNSResolutionTest host="https://${/instance_name}.service-now.com" />
        <TCPConnectionTest host="https://${/instance_name}.service-now.com" />
        <HTTPConnectionThroughProxyTest url="https://${/instance_name}.service-now.com" expectedResponseStatus="404" />
    </Tests>
</Workflow>
