<Workflow name="Qmasters GitHub workflow for QRadar" version="1.0" xmlns="http://qradar.ibm.com/UniversalCloudRESTAPI/Workflow/V2">
    <Parameters>
        <Parameter name="orgName" label="Organization Name" required="false" />
        <Parameter name="apiToken" label="API Token" required="true" secret="true" />
        <Parameter name="phrase" label="Search Phrase" required="false"/>
        <Parameter name="perPage" label="Per Page" required="false" default="30" />
        <Parameter name="include" label="Include" required="false" default="web" />
        <Parameter name="timeZone" label="Time Zone" required="false" default="UTC" />
        <Parameter name="startTime" label="Start Time" required="false" default="${time() - 3600000}" />
    </Parameters>

    <Actions>
        <!-- Clear the log source status before a new workflow run starts -->
        <ClearStatus />

        <!-- Initialize the risingValue filter for the first run. -->
        <Initialize path="/bookmark" value="${/startTime}" />

        <!-- Prepare the logs path -->
        <Set path="/logs" value="[]"/>

        <!-- Prepare the start date filter, based on the current bookmark -->
        <FormatDate pattern="yyyy-MM-dd'T'HH:mm:ss[.SSS]" time="${/bookmark}" timeZone="${/timeZone}" savePath="/startTime" />

        <!-- Set the pharse wite the last log date -->
        <Set path="/phraseQuery" value="created:${/startTime}+${/phrase}"/>
        
        <!-- Set the firse page number -->
        <Set path="/page_number" value="1"/>
        <Set path="/page_number" value="${/page_number + 1}"/>

        <Log type="INFO" message="Page number: ${/page_number}, Page size: ${/perPage}"/>
        

        <!-- Get Logs -->				
        <CallEndpoint url="https://api.github.com/orgs/${/orgName}/audit-log" method="GET" savePath="/getLogs">
            <BearerAuthentication token="${/apiToken}" />
            <QueryParameter name="phrase" value="${/phraseQuery}" omitIfEmpty="true"/>
            <QueryParameter name="per_page" value="${/perPage}" omitIfEmpty="true"/>
            <QueryParameter name="include" value="${/include}" omitIfEmpty="true"/>
            <QueryParameter name="order" value="desc"/>
        </CallEndpoint>

        <!-- Handle Errors -->
        <If condition="/getLogs/status_code != 200">
            <If condition="/getLogs/status_code = 403" >
                <Abort reason="This key has no satisfied permissions" />
                <Log type="ERROR" message="GitHub API error: ${/getLogs/body/errorMessages}"/>
            </If>
            <If condition="/getLogs/status_code = 401" >
                <Abort reason="Bad credentials" />
                <Log type="ERROR" message="GitHub API error: ${/getLogs/body/errorMessages}"/>
            </If>

            <If condition="/getLogs/status_code = 400" >
                <Abort reason="Bad input parameter. ${/getLogs/body/errorMessages}" />
                <Log type="ERROR" message="GitHub API error: ${/getLogs/body/errorMessages}"/>
            </If>

            <If condition="/getLogs/status_code >= 500" >
                <Abort reason="GitHub API is not available" />
                <Log type="ERROR" message="GitHub API error: ${/getLogs/body/errorMessages}"/>
            </If>

            <Abort reason="GitHub abort reason:  ${/getLogs}" />
            <Log type="ERROR" message="GitHub API error: ${/getLogs/body/errorMessages}"/>
        </If>

        <!-- Merge the log data from the API response into the "/logs" path. -->
        <Merge targetPath="/logs" sourcePath="/getLogs/body" />

        <!-- Log the count of logs received in the current API response -->
        <Log type="info" message="logs count ${count(/getLogs/body)}"/>
        <!-- Log the total count of logs accumulated so far -->
        <Log type="info" message="total logs count ${count(/logs)}"/>

        <!-- Set the "/pattern" path to match the pattern of the next link. -->
        <Set path="/pattern" value='^&lt;(.*)&gt;; rel="next"'/>

        <!-- The regex pattern matching to capture the 'link' header value from /getLogs/headers. -->
        <RegexCapture value="${/getLogs/headers/link}" pattern="${/pattern}" savePath="/nextLink" />

        <!-- This loop runs as long as there is a next link available -->
        <DoWhile condition="count(/nextLink) > 0">
        
            <Log type="INFO" message="Page number: ${/page_number}, Page size: ${/perPage}"/>
            <Set path="/page_number" value="${/page_number + 1}"/>

            <!-- Make another API call using the next link -->
            <CallEndpoint url="${/nextLink}" method="GET" savePath="/getLogs">
                <BearerAuthentication token="${/apiToken}" />
            </CallEndpoint>
            
            <!-- Merge the log data from the API response into the "/logs" path. -->
            <Merge targetPath="/logs" sourcePath="/getLogs/body" />
            
            <!-- Log the count of logs received in the current API response -->
            <Log type="info" message="logs count ${count(/getLogs/body)}"/>
            <!-- Log the total count of logs accumulated so far -->
            <Log type="info" message="total logs count ${count(/logs)}"/>

            <!-- Post Events, if any -->
            <!-- <PostEvents path="/logs" source="${/orgName}" /> -->

            <!-- Extract the next link for the next iteration -->
            <RegexCapture value="${/getLogs/headers/link}" pattern="${/pattern}" savePath="/nextLink" />
        </DoWhile>

        
        <!-- Log the count of received logs -->
        <Log type="info" message="${count(/logs)} logs are received"/>

        <!-- Update the bookmark -->
        <Set path="/last_event_time" value="${max(/logs/created_at)}" />
        <Set path="/bookmark" value="${/last_event_time + 1}" />

    </Actions>	
    <Tests>
        <DNSResolutionTest host="api.github.com" />
        <TCPConnectionTest host="api.github.com" />
        <SSLHandshakeTest host="api.github.com" />
        <HTTPConnectionThroughProxyTest url="api.github.com" expectedResponseStatus="404" />
    </Tests>
</Workflow>