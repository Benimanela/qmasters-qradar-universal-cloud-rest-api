<Workflow name="Qmasters CrowdStrike File Vantage workflow for QRadar" version="1.0" xmlns="http://qradar.ibm.com/UniversalCloudRESTAPI/Workflow/V2">
    <Parameters>
        <Parameter name="api_host" label="Host Name" required="true" />
        <Parameter name="client_id" label="Account ID" required="true" secret="true" />
        <Parameter name="client_secret" label="API Key" required="true" secret="true" />
        <Parameter name="limit" label="Limit" required="false" default="100" />
    </Parameters>

    <Actions>
        <!-- Clear the log source status before a new workflow run starts -->
        <ClearStatus />
        
        <!-- Get the token -->            
        <CallEndpoint url="${/api_host}/oauth2/token" method="POST" savePath="/get_access_token">
            <RequestHeader name="Accept" value="application/json" />
            <RequestHeader name="Content-Type" value="application/x-www-form-urlencoded" />
            <UrlEncodedFormRequestBody>
                <Parameter name="client_id" value="${/client_id}" />
                <Parameter name="client_secret" value="${/client_secret}" />
            </UrlEncodedFormRequestBody>
        </CallEndpoint>
        <Log type="info" message="1 ${/get_access_token}" />

        <!-- Handle errors. -->
        <If condition="/get_access_token/status_code != 201">
            <If condition="/get_access_token/status_code = 403">
                <Abort reason="Invalid CrowdStrike API Key"/>
                <Log type="ERROR" message="CrowdStrike abort at get token, reason: Invalid CrowdStrike API Key"/>
            </If>

            <If condition="/get_access_token/status_code >= 500">
                <Abort reason="CrowdStrike API is not available"/>
                <Log type="ERROR" message="CrowdStrike abort at get token, reason: CrowdStrike API is not available"/>
            </If>

            <Abort reason="CrowdStrike abort reason: ${/get_access_token}"/>
                <Log type="ERROR" message="CrowdStrike abort at get token, reason: ${/get_access_token}"/>
        </If>

        <!-- Initialize a list to contain all alerts -->
        <Set path="/events" value="[]" />

                        
        <!-- Set the token -->
        <Set path="/bearer_token" value="${/get_access_token/body/access_token}" />

        <!-- Prepare the start time filter, based on the current bookmark -->
        <Initialize path="/bookmark" value="${time() - 604800000}" />
        <!-- Prepare the start time filter, based on the current bookmark -->
        <FormatDate pattern="yyyy-MM-dd'T'HH:mm:ss'Z'" time="${/bookmark}" timeZone="UTC" savePath="/start_time" />
                        <Log type="info" message="6 ${/start_time}" />

        <!-- Get Events List -->                                                 
        <CallEndpoint url="${/api_host}/filevantage/queries/changes/v2" method="GET" savePath="/get_events_list" >
        <QueryParameter name="filter" value="action_timestamp:>'${/start_time}'" />
            <RequestHeader name="Accept" value="application/json" />
            <RequestHeader name="Authorization" value="Bearer ${/bearer_token}" />
            <UrlEncodedFormRequestBody>
                <Parameter name="limit" value="${/limit}" />
            </UrlEncodedFormRequestBody>                    
        </CallEndpoint>
        <Log type="info" message="2 ${/get_events_list}" />

        <!-- Handle Errors -->
        <If condition="/get_events_list/status_code != 200">
            <If condition="/get_events_list/status_code = 403" >
                <Abort reason="Invalid CrowdStrike API Key" />
            </If>

            <If condition="/get_events_list/status_code >= 500" >
                <Abort reason="CrowdStrike API is not available" />
            </If>

            <Abort reason="CrowdStrike abort reason:  ${/get_events_list}" />
        </If> 

        <!-- Get Alerts -->    

        <ForEach item="/resource" items="/get_events_list/body/resources">
            <CallEndpoint url="${/api_host}/filevantage/entities/changes/v2?ids=${/resource}" method="GET" savePath="/get_event/${/resource}" >
                <RequestHeader name="Accept" value="application/json" />
                <RequestHeader name="Authorization" value="Bearer ${/bearer_token}" />
            </CallEndpoint>
            <Add path="/events" value="${/get_event/${/resource}/body/resources[0]}" />

        </ForEach>
        <!-- Post Event, if any -->
        <If condition="count(/events) > 0">
            <PostEvents path="/events" source="${/api_host}" />

            <!-- Update the bookmark -->
                                                                        <Log type="info" message="3 ${max(/events/action_timestamp)}" />
            <ParseDate pattern="yyyy-MM-dd'T'HH:mm:ss'Z'" timeZone="UTC" date="${max(/events/action_timestamp)}" savePath="/last_event_time" />
            <FormatDate pattern="yyyy-MM-dd'T'HH:mm:ss.SSS.'Z'" timeZone="UTC" time="${/last_event_time + 1}" savePath="/bookmark" />
            <ParseDate pattern="yyyy-MM-dd'T'HH:mm:ss.SSS.'Z'" timeZone="UTC" date="${/bookmark}" savePath="/bookmark" />
        </If>
    
    </Actions>

    <Tests>
        <DNSResolutionTest host="${/api_host}" />
        <TCPConnectionTest host="${/api_host}" />
        <SSLHandshakeTest host="${/api_host}" />
        <HTTPConnectionThroughProxyTest url="${/api_host}" expectedResponseStatus="404" />
    </Tests>
</Workflow>
