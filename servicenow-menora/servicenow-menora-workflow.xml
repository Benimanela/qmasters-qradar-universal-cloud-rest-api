<Workflow name="Qmasters ServiceNow Menora -" version="1.0" xmlns="http://qradar.ibm.com/UniversalCloudRESTAPI/Workflow/V2">
    <Parameters>
        <Parameter name="identifier" label="Log Source Identifier" description="The log source identifier to post the events to." required="true" />
		<Parameter name="instance_name" label="Instance Name" description="." required="true" />
		<Parameter name="username" label="Username" description="." required="true" />
		<Parameter name="password" label="API Secret" description="." required="true" secret="true" />
		<Parameter name="client_id" label="Client ID" description="." required="true" secret="true" />
		<Parameter name="client_secret" label="Client secret" description="." required="true" secret="true" />

        <Parameter name="time_zone" label="Time Zone" description="The timezone to be used." default="UTC" />
        <Parameter name="events_per_fetch" label="Events Per Fetch" description="Max number of records to return per fetch. Note: a large fetch may cause timeout errors." default="100" />
        <Parameter name="initial_fetch_period" label="Initial Event Fetch Period in Days" description="Number of days in the past from which events will be initially retrieved." default="7" />
        <Parameter name="tables_to_fetch" label="Tables to Fetch" description="Comma-separated list of tables to fetch." default="upgrade_history_update_xml,sys_audit,isc_event" />
    </Parameters>

    <Actions>
		<!-- Clear the log source status before a new workflow run starts. -->
        <ClearStatus />

        <Split value="${/tables_to_fetch}" delimiter="," savePath="/tables_to_fetch" />

        <!-- Incase the user has set all poll parameters to false. -->
        <If condition="count(/tables_to_fetch) = 0">
            <Abort reason="${/tables_to_fetch}" />
            <Log type="ERROR" message="ServiceNow Menora - abort reason: Please choose at least one table to fetch." />
        </If>

        <Log type="INFO" message="The following tables will be fetched: ${/tables_to_fetch}." />

        <Set path="/map_table_to_time_key_name" value="{'upgrade_history_update_xml': 'upgr_sys_created_on','sys_audit_role': 'sys_created_on','isc_event': 'sys_created_on'}" />

        <!-- Initialize a timer to calculate the runtime for each report type and total runtime of the script. -->
        <Set path="/total_start_time" value="${time()}" />
        <Initialize path="/time_format" value="yyyy-MM-dd'T'HH:mm:ss[.SSS]'Z'" />

        <!-- Get new token from ServiceNow. -->
        <CallEndpoint url="https://${/instance_name}.service-now.com/oauth_token.do" method="POST" savePath="/token_response" >
            <!-- <SSLConfiguration allowUntrustedServerCertificate="true" /> -->
            <UrlEncodedFormRequestBody>
                <Parameter name="grant_type" value="password" />
                <Parameter name="client_id" value="${/client_id}" />
                <Parameter name="client_secret" value="${/client_secret}" />
                <Parameter name="username" value="${/username}" />
                <Parameter name="password" value="${/password}" />
            </UrlEncodedFormRequestBody>
        </CallEndpoint>


        <!-- Handle token generation error. -->
        <If condition="/token_response/status_code != 200">
            <Log type="ERROR" message="ServiceNow Menora - status code ${/token_response/status_code}, abort to generate new token. Reason: ${/token_response/body}" />
            <!-- Break point. ??? -->
            <Abort reason="${/token_response}" />
        </If>

        <!-- Set the bearer_token value for the API requests. ??? -->
        <Set path="/bearer_token" value="${/token_response/body/access_token}" />

        <Log type="INFO" message="ServiceNow-Menora Token: ${/bearer_token}." />

        <ForEach item="/table" items="/tables_to_fetch">
            <Set path="/individual_start_time" value="${time()}" />

            <!-- <Log type="INFO" message="total_start_time= ${/total_start_time} and initial_fetch_period= ${initial_fetch_period}" /> -->

            <!-- Initialize the last_fetched filter for the first run. -->
            <Initialize path="/last_fetched_${/table}" value="${/total_start_time - /initial_fetch_period * 86400 * 1000}" />

            <Log type="INFO" message="'last_fetched' time for '${/table}' is: ${/last_fetched_${/table}}" />

            <Log type="INFO" message="Starting to fetch events through pagination for '${/table}'." />
            <Set path="/counter" value="1" />
            <Set path="/fetched_events_number" value="0" />

            <!-- Pagination handling: aslong as events are returned, keep fetching data. -->
            <DoWhile condition="${/fetched_events_number} >= ${/events_per_fetch}">
                <Log type="INFO" message="Fetching page number ${/counter} for '${/table}'..." />

                <!-- Get the reports. -->
                <CallEndpoint url="https://${/instance_name}.service-now.com/api/now/table/${/table}" method="GET" savePath="/${/table}_response" >
                    <!-- <SSLConfiguration allowUntrustedServerCertificate="true" /> -->
                    <BearerAuthentication token="${/bearer_token}" />
                    <QueryParameter name="sysparm_limit" value="${/events_per_fetch}" />
                    <QueryParameter name="sysparm_query" value="upgr_sys_updated_on:'${/last_fetched_${/table}}'" />
                </CallEndpoint>

                <!-- Handle errors. -->
                <If condition="/${/table}_response/status_code != 200">
                    <Log type="ERROR" message="ServiceNow Menora - status code ${/${/table}_response/status_code}, abort at get ${/table} reports. Reason: ${/${/table}_response/body}" />
                    <Abort reason="${/${/table}_response}" />
                </If>

                <Set path="/events" value="${/get_${/table}_response/body/result}" />
                <Set path="/fetched_events_number" value="${count(/events)}" />
                <Set path="/counter" value="${/counter + 1}" />

                <Log type="INFO" message="${/fetched_events_number} events for were fetched for '${/table}'." />

                <!-- If there were any events, post them and update the last_fetched timer to the latest one. -->
                <If condition="${/fetched_events_number} > 0">
                    <Log type="INFO" message="Posting fetched events..." />
                    <!-- <PostEvents path="/events" source="${/identifier}" /> -->

                    <!-- Update the last_fetched for next run. -->
                    <ParseDate pattern="${/time_format}" timeZone="${/time_zone}" date="${max(/events/${/map_table_to_time_key_name/${/table}})}" savePath="/last_fetched_${/table}" />

                    <FormatDate pattern="${/time_format}" timeZone="${/time_zone}" time="${/last_fetched_${/table}}" savePath="/last_fetched_${/table}" />
                    <ParseDate pattern="${/time_format}" timeZone="${/time_zone}" date="${/last_fetched_${/table}}" savePath="/last_fetched_${/table}" />

                    <Log type="INFO" message="'last_fetched' time for '${/table}' updated to: ${/last_fetched_${/table}}" />

                </If>
            </DoWhile>

            <Log type="INFO" message="Done fetching events for '${/table}'. Total time in milliseconds is: ${time() - /individual_start_time}" />
        </ForEach>

        <Log type="INFO" message="Done fetching events. Total time in milliseconds is: ${time() - /total_start_time}" />
	</Actions>

    <Tests>
        <DNSResolutionTest host="${/hostname}" />
        <TCPConnectionTest host="${/hostname}" />
        <HTTPConnectionThroughProxyTest url="${/hostname}" expectedResponseStatus="404" />
    </Tests>
</Workflow>
