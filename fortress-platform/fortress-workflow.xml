<Workflow name="Qmasters Fortress workflow for QRadar" version="1.1" xmlns="http://qradar.ibm.com/UniversalCloudRESTAPI/Workflow/V2">
    <Parameters>
        <Parameter name="identifier" label="Log Source Identifier" required="true" />
        <Parameter name="api_host" label="API Host Name" required="true" />
        <Parameter name="api_id" label="API ID" required="true" secret="true" />
        <Parameter name="api_key" label="API Key" required="true" secret="true" />
        <Parameter name="severity" label="Severity" required="false" default='"CRITICAL","HIGH","MEDIUM"' />
        <Parameter name="status" label="Status" required="false" default='"OPEN","QUARANTINED","DETECTED"' />
        <Parameter name="service_type" label="Service Type" required="false" />
        <Parameter name="page_size" label="Page Size" required="false" default="100" />
        <Parameter name="time_zone" label="Time Zone" required="false" default="UTC" />
        <Parameter name="initial_fetch_period" label="Initial Fetch Period (Days)" description="Number of days in the past from which to retrieve initial events." default="7" />
    </Parameters>

    <Actions>
        <!-- Clear the log source status before a new workflow run starts -->
        <ClearStatus />

        <Initialize path="/cleaned_alerts" value="[]" />

        <Initialize path="/time_format" value="yyyy-MM-dd'T'HH:mm:ss.SSS'Z'" />

        <!-- Initialize the last updated time filter for the first run. -->
        <Initialize path="/bookmark" value="${time() - /initial_fetch_period * 86400 * 1000}" />
        
        <Set path="/start_time" value="${/bookmark}" />
        <Log type="INFO" message="[Fortress API]: bookmark: ${/bookmark}" />
        <FormatDate pattern="${/time_format}" timeZone="${/time_zone}" time="${/bookmark}" savePath="/start_time" />

        <Log type="INFO" message="[Fortress API]: Start fetching events, Start time: ${/start_time}" />
        
        <!-- Get Alerts -->
        <CallEndpoint url="https://${/api_host}/v1/alert/search" method="POST" savePath="/get_alerts">
            <RequestHeader name="x-api-key" value="${/api_id}" />
            <RequestHeader name="x-api-secret" value="${/api_key}" />
            <RequestBody type="application/json" encoding="UTF-8">
                {
                    "pagination": {
                        "skip": 0,
                        "take": ${/page_size}
                    },
                    "severity":
                    [
                        ${/severity}
                    ],
                    "status":
                    [
                        ${/status}
                    ],
                    "serviceType":
                    [
                        ${/service_type}
                    ],
                    "createdAt": {
                        "startDate": "${/start_time}"
                    }
                }
            </RequestBody>
        </CallEndpoint>

        <!-- Handle Errors -->
        <If condition="/get_alerts/status_code != 200">
            <If condition="/get_alerts/status_code = 403">
                <Log type="ERROR" message="[Fortress API]: This key has no satisfied permissions: ${/get_alerts}" />
                <Abort reason="This key has no satisfied permissions" />
            </If>
            <If condition="/get_alerts/status_code = 404">
                <Log type="ERROR" message="[Fortress API]: Invalid token or token expired." />
                <Abort reason="Invalid token or token expired." />
            </If>
            <If condition="/get_alerts/status_code = 400">
                <Log type="ERROR" message="[Fortress API]: Bad input parameter: ${/get_alerts}" />
                <Abort reason="Bad input parameter." />
            </If>
            <If condition="/get_alerts/status_code >= 500">
                <Log type="ERROR" message="[Fortress API]: Fortress API is not available." />
                <Abort reason="Fortress API is not available." />
            </If>
            <Log type="ERROR" message="[Fortress API]: Fortress abort reason: ${/get_alerts}." />
            <Abort reason="Fortress abort reason." />
        </If>

        <!-- Post Events, if any -->
        <If condition="count(/get_alerts/body/records) > 0">
            <Log type="INFO" message="[Fortress API]: Fetched ${count(/get_alerts/body/records)} alerts, building cleaned alerts..." />

            <!-- Initialize the cleaned array -->
            <Set path="/cleaned_alerts" value="[]" />

            <!-- Add cleaned events -->
            <ForEach item="/current_alert" items="/get_alerts/body/records">
                <Add path="/cleaned_alerts" value="{
                    &quot;_id&quot;: &quot;${/current_alert/_id}&quot;,
                    &quot;customer&quot;: {
                        &quot;companyName&quot;: &quot;${/current_alert/customer/companyName}&quot;
                    },
                    &quot;nanoId&quot;: &quot;${/current_alert/nanoId}&quot;,
                    &quot;type&quot;: &quot;${/current_alert/type}&quot;,
                    &quot;originCreatedAt&quot;: &quot;${/current_alert/originCreatedAt}&quot;,
                    &quot;originUpdatedAt&quot;: &quot;${/current_alert/originUpdatedAt}&quot;,
                    &quot;createdAt&quot;: &quot;${/current_alert/createdAt}&quot;,
                    &quot;updatedAt&quot;: &quot;${/current_alert/updatedAt}&quot;,
                    &quot;serviceType&quot;: &quot;${/current_alert/serviceType}&quot;,
                    &quot;serviceProvider&quot;: &quot;${/current_alert/serviceProvider}&quot;,
                    &quot;name&quot;: &quot;${/current_alert/name}&quot;,
                    &quot;description&quot;: &quot;${/current_alert/description}&quot;,
                    &quot;status&quot;: &quot;${/current_alert/status}&quot;,
                    &quot;actionStatus&quot;: &quot;${/current_alert/actionStatus}&quot;,
                    &quot;reason&quot;: &quot;${/current_alert/reason}&quot;,
                    &quot;severity&quot;: &quot;${/current_alert/severity}&quot;,
                    &quot;username&quot;: &quot;${/current_alert/username}&quot;,
                    &quot;email&quot;: &quot;${/current_alert/email}&quot;,
                    &quot;deviceName&quot;: &quot;${/current_alert/deviceName}&quot;,
                    &quot;user&quot;: &quot;${/current_alert/user}&quot;,
                    &quot;score&quot;: &quot;${/current_alert/score}&quot;,
                    &quot;category&quot;: &quot;${/current_alert/category}&quot;,
                    &quot;attackVector&quot;: &quot;${/current_alert/attackVector}&quot;,
                    &quot;assignedTo&quot;: &quot;${/current_alert/assignedTo}&quot;,
                    &quot;originalId&quot;: &quot;${/current_alert/originalId}&quot;,
                    &quot;serviceDetails&quot;: {
                        &quot;sampleFrom&quot;: &quot;${/current_alert/serviceDetails/sampleFrom}&quot;,
                        &quot;sampleTo&quot;: &quot;${/current_alert/serviceDetails/sampleTo}&quot;,
                        &quot;action&quot;: &quot;${/current_alert/serviceDetails/action}&quot;,
                        &quot;hash&quot;: &quot;${/current_alert/serviceDetails/hash}&quot;,
                        &quot;summary&quot;: {
                            &quot;subject&quot;: &quot;${/current_alert/serviceDetails/summary/subject}&quot;,
                            &quot;from&quot;: &quot;${/current_alert/serviceDetails/summary/from}&quot;,
                            &quot;to&quot;: &quot;${/current_alert/serviceDetails/summary/to}&quot;,
                            &quot;organizationRecipients&quot;: &quot;${/current_alert/serviceDetails/summary/organizationRecipients}&quot;,
                            &quot;sourceIp&quot;: &quot;${/current_alert/serviceDetails/summary/sourceIp}&quot;,
                            &quot;returnPath&quot;: &quot;${/current_alert/serviceDetails/summary/returnPath}&quot;,
                            &quot;mainAddressDomain&quot;: &quot;${/current_alert/serviceDetails/summary/mainAddressDomain}&quot;
                        }
                    },
                    &quot;deviceId&quot;: &quot;${/current_alert/serviceAccount/state/deviceId}&quot;,
                    &quot;os&quot;: &quot;${/current_alert/serviceAccount/state/os}&quot;,
                    &quot;osVersion&quot;: &quot;${/current_alert/serviceAccount/state/osVersion}&quot;,
                    &quot;externalIp&quot;: &quot;${/current_alert/serviceAccount/state/externalIp}&quot;,
                    &quot;internalIp&quot;: &quot;${/current_alert/serviceAccount/state/internalIp}&quot;,
                    &quot;risk&quot;: &quot;${/current_alert/serviceAccount/state/risk}&quot;,
                    &quot;riskLevel&quot;: &quot;${/current_alert/serviceAccount/state/riskLevel}&quot;,
                    &quot;softwareName&quot;: &quot;${/current_alert/software/name}&quot;
                }" />
            </ForEach>

            <!-- Post cleaned events -->
            <Log type="INFO" message="[Fortress API]: cleaned_alerts: ${/cleaned_alerts}" />
            <PostEvents path="/cleaned_alerts" source="${/identifier}" />

            <!-- Update the bookmark -->
            <ParseDate pattern="yyyy-MM-dd'T'HH:mm:ss[.SSS]'Z'" timeZone="${/time_zone}" date="${max(/get_alerts/body/records/createdAt)}" savePath="/last_event_time" />
            <Set path="/lastAlert" value="${/last_event_time}" />
            <Set path="/bookmark" value="${/last_event_time + 1}" />
        </If>
        <Else>
            <Log type="INFO" message="[Fortress API]: The connection to the Fortress API was successfully established; however, there are no new alerts available for retrieval at this moment. The last alert received was at: ${/lastAlert} (UTC)." />
        </Else>
    </Actions>

    <Tests>
        <DNSResolutionTest host="${/api_host}" />
        <TCPConnectionTest host="${/api_host}" />
        <HTTPConnectionThroughProxyTest url="${/api_host}" expectedResponseStatus="404" />
    </Tests>
</Workflow>
