<Workflow name="Qmasters ObserveIT" version="1.0" xmlns="http://qradar.ibm.com/UniversalCloudRESTAPI/Workflow/V2">
    <Parameters>
		<Parameter name="identifier" label="Log Source Identifier" description="The log source identifier to post the events to." required="true" />
		<Parameter name="hostname" label="Host Name" description="URL or IP for the instance." required="true" default="https://myobserveit.com" />
		<Parameter name="client_id" label="Organization Key"
            description="Can be received through the Developer Portal by selecting Credentials and pressing the Create App button."
            required="true" />
		<Parameter name="client_secret" label="API Secret"
            description="Can be received through the Developer Portal by selecting Credentials and pressing the Create App button."
            required="true" secret="true" />

        <Parameter name="time_zone" label="Time Zone"
            description="The timezone used in ObserveIT." default="UTC" />
        <Parameter name="events_per_poll" label="Events Per Poll"
            description="Max number of records to return per poll.  Note: a large fetch may cause timeout errors." default="100" />
        <Parameter name="initial_event_fetch_period" label="Initial Event Fetch Period in Days"
            description="Number of days in the past from which events will be initially retrieved." default="7" />
        <Parameter name="report_types" label="Report Types"
            description="Comma-separated list of report types to poll." default="alert_v0,audit_configuration_v0,audit_logins_v0,audit_saved_sessions_v0,audit_session_playback_v0,system_events_v0,user_command_activity_with_output_v0,user_command_output_stream_v0,user_dba_activity_v0,user_file_activity_v0,user_interface_activity_v0,user_messaging_actions_activity_v0,user_session_v0" />
        <Parameter name="piis_to_exclude" label="Personal Identifiable Information to Exclude"
            description="Comma-separated list of Personal Identifiable Information (PII) to exclude." default="loginName,secondaryLoginName,endpointName,remoteHostName,windowTitle,accessedUrl,domainName,secondaryDomainName,remoteAddress,sqlUserName,sessionServerName,sessionLoginName,savedSessionName,operatorUsername,operatorDomainName,userName,machineName" />
    </Parameters>

    <Actions>
		<!-- Clear the log source status before a new workflow run starts. -->
        <ClearStatus />
        <Log type="INFO" message="Authenticating to ObserveIT, fetching bearer token..." />

		<!-- Get Bearer Token. -->
		<CallEndpoint url="${/hostname}/v2/apis/auth/oauth/token" method="POST" savePath="/get_bearer_token" >
            <!-- <SSLConfiguration allowUntrustedServerCertificate="true" /> -->
			<UrlEncodedFormRequestBody>
                <Parameter name="grant_type" value="client_credentials" />
                <Parameter name="client_id" value="${/client_id}" />
                <Parameter name="client_secret" value="${/client_secret}" />
                <Parameter name="scope" value="*" />
            </UrlEncodedFormRequestBody>
		</CallEndpoint>

		<!-- Handle errors. -->
        <If condition="/get_bearer_token/status_code != 200">
            <If condition="/get_bearer_token/status_code = 400">
                <Log type="ERROR" message="ObserveIT abort at get token, reason: ${/get_bearer_token/body/_status/message}" />
                <Abort reason="${/get_bearer_token}" />
            </If>
            <If condition="/get_bearer_token/status_code = 401">
                <Log type="ERROR" message="ObserveIT abort at get token, reason: Authentication error!" />
                <Abort reason="${/get_bearer_token}" />
            </If>
            <If condition="/get_bearer_token/status_code = 404">
                <Log type="ERROR" message="ObserveIT abort at get token, reason: URL not found!" />
                <Abort reason="${/get_bearer_token}" />
            </If>
            <If condition="/get_bearer_token/status_code = 408">
                <Log type="ERROR" message="ObserveIT abort at get token, reason: Timeout error!" />
                <Abort reason="${/get_bearer_token}" />
            </If>
            <If condition="/get_bearer_token/status_code = 500">
                <Log type="ERROR" message="ObserveIT abort at get token, reason: Invalid client_id" />
                <Abort reason="${/get_bearer_token}" />
            </If>

			<Log type="ERROR" message="ObserveIT abort at get token, reason: ${/get_bearer_token}" />
            <Abort reason="${/get_bearer_token}" />
        </If>

        <Log type="INFO" message="Bearer token received!" />
        <!-- Save the bearer token. -->
		<Set path="/bearer_token" value="${/get_bearer_token/body/access_token}" />

        <Split value="${/piis_to_exclude}" delimiter="," savePath="/piis_to_exclude" />
        <Split value="${/report_types}" delimiter="," savePath="/report_types" />

        <!-- Incase the user has set all poll parameters to false. -->
        <If condition="count(/report_types) = 0">
            <Log type="ERROR" message="ObserveIT abort reason: Please choose at least one report type to poll." />
            <Abort reason="${/report_types}" />
        </If>

        <Log type="INFO" message="The following report types will be fetched: ${/report_types}." />

        <!-- Initialize a timer to calculate the runtime for each report type and total runtime of the script. -->
        <Set path="/total_start_time" value="${time()}" />

        <ForEach item="/report_type" items="/report_types">
            <Set path="/individual_start_time" value="${time()}" />

            <!-- Initialize the risingValue filter for the first run. -->
            <Initialize path="/risingValue_${/report_type}" value="${/total_start_time - /initial_event_fetch_period * 86400 * 1000}" />
            <Log type="INFO" message="'risingValue' time for '${/report_type}' is: ${/risingValue_${/report_type}}" />

            <!-- Handle PII. -->
            <If condition="count(/piis_to_exclude) > 0">
                <!-- Create a list of PIIs to exclude. -->
                <Log type="INFO" message="Fetching fields for the report type '${/report_type}'..." />

                <!-- Get a report type fields. -->
                <CallEndpoint url="${/hostname}/v2/apis/report;realm=observeit/reports/${/report_type}" method="GET" savePath="/get_${/report_type}_fields" >
                    <!-- <SSLConfiguration allowUntrustedServerCertificate="true" /> -->
                    <BearerAuthentication token="${/bearer_token}" />
                </CallEndpoint>

                <!-- Handle errors. -->
                <If condition="/get_${/report_type}_fields/status_code != 200">
                    <If condition="/get_${/report_type}_fields/status_code = 401">
                        <Log type="ERROR" message="ObserveIT abort at get ${/report_type} report fields, reason: Authentication error!" />
                        <Abort reason="${/get_${/report_type}_fields}" />
                    </If>
                    <If condition="/get_${/report_type}_fields/status_code = 404">
                        <Log type="ERROR" message="ObserveIT abort at get ${/report_type} report fields, reason: URL not found!" />
                        <Abort reason="${/get_${/report_type}_fields}" />
                    </If>
                    <If condition="/get_${/report_type}_fields/status_code = 408">
                        <Log type="ERROR" message="ObserveIT abort at get ${/report_type} report fields, reason: Timeout error!" />
                        <Abort reason="${/get_${/report_type}_fields}" />
                    </If>

                    <Log type="ERROR" message="ObserveIT abort at get ${/report_type} report fields, reason: ${/get_${/report_type}_fields}" />
                    <Abort reason="${/get_${/report_type}_fields}" />
                </If>


                <!-- Create an empty string that will hold the included fields.  -->
                <Set path="/${/report_type}_field_string" value="" />
                <!-- Create an empty list that will hold the included fields.  -->
                <Set path="/included_${/report_type}_fields" value="[]" />

                <!-- Create a list with all fields except for PII. -->
                <ForEach item="/${/report_type}_fields" items="/get_${/report_type}_fields/body/data[0]/columns">
                    <Set path="/is_pii" value="false" />

                    <!-- Check if the current field is a PII. -->
                    <ForEach item="/pii_to_exclude" items="/piis_to_exclude">
                        <If condition="'${/${/report_type}_fields/name}' = '${/pii_to_exclude}'">
                            <Set path="/is_pii" value="true" />
                        </If>
                    </ForEach>

                    <!-- If the current field isn't a PII, save it in the include list. -->
                    <If condition="${/is_pii} = false">
                        <Add path="/included_${/report_type}_fields" value="${/${/report_type}_fields/name}" />
                    </If>
                </ForEach>

                <Set path="/${/report_type}_field_string" value="${/included_${/report_type}_fields[0]}" />

                <!-- Create a string from the included fields. -->
                <ForEach item="/${/report_type}_fields" items="/included_${/report_type}_fields">
                    <Set path="/${/report_type}_field_string" value="${/${/report_type}_field_string},${/${/report_type}_fields}" />
                </ForEach>
            </If>

            <Log type="INFO" message="The following fields will be fetched for the report type '${/report_type}': ${/${/report_type}_field_string}." />
            <Log type="INFO" message="Starting to fetch events through pagination for '${/report_type}'." />

            <Set path="/counter" value="1" />
            <Set path="/fetched_events_number" value="0" />
            <Set path="/report_type_dict" value="{'report_type': ${/report_type}}" />

            <!-- Pagination handling: aslong as events are returned, keep fetching data. -->
            <DoWhile condition="${/fetched_events_number} >= ${/events_per_poll}">
                <Log type="INFO" message="Fetching page number ${/counter} for '${/report_type}'..." />

                <!-- Get the reports. -->
                <CallEndpoint url="${/hostname}/v2/apis/report;realm=observeit/reports/${/report_type}/stream" method="GET" savePath="/get_${/report_type}_reports" >
                    <!-- <SSLConfiguration allowUntrustedServerCertificate="true" /> -->
                    <BearerAuthentication token="${/bearer_token}" />
                    <QueryParameter name="fields" value="${/${/report_type}_field_string}" />
                    <QueryParameter name="limit" value="${/events_per_poll}" />
                    <QueryParameter name="since" value="${/risingValue_${/report_type}}" />
                </CallEndpoint>

                <!-- Handle errors. -->
                <If condition="/get_${/report_type}_reports/status_code != 200">
                    <If condition="/get_${/report_type}_reports/status_code = 400">
                        <Log type="ERROR" message="ObserveIT abort at get ${/report_type} reports, reason: ${/get_${/report_type}_reports}/body/_status/message" />
                        <Abort reason="${/get_${/report_type}_reports}" />
                    </If>
                    <If condition="/get_${/report_type}_reports/status_code = 401">
                        <Log type="ERROR" message="ObserveIT abort at get ${/report_type} reports, reason: Authentication error!" />
                        <Abort reason="${/get_${/report_type}_reports}" />
                    </If>
                    <If condition="/get_${/report_type}_reports/status_code = 404">
                        <Log type="ERROR" message="ObserveIT abort at get ${/report_type} reports, reason: URL not found!" />
                        <Abort reason="${/get_${/report_type}_reports}" />
                    </If>
                    <If condition="/get_${/report_type}_reports/status_code = 408">
                        <Log type="ERROR" message="ObserveIT abort at get ${/report_type} reports, reason: Timeout error!" />
                        <Abort reason="${/get_${/report_type}_reports}" />
                    </If>

                    <Log type="ERROR" message="ObserveIT abort at get ${/report_type} reports, reason: ${/get_${/report_type}_reports}" />
                    <Abort reason="${/get_${/report_type}_reports}" />
                </If>

                <Log type="INFO" message="Done Fetching, processing data..." />

                <!-- Initialize an empty list for events -->
                <Set path="/report_events" value="[]" />

                <!-- Merge the report type to each event and then post it. -->
                <ForEach item="/report_data" items="/get_${/report_type}_reports/body/data">
                    <Merge sourcePath="/report_type_dict" targetPath="/report_data" />
                    <Add path="/report_events" value="${/report_data}" />
                </ForEach>

                <Set path="/fetched_events_number" value="${count(/report_events)}" />
                <Set path="/counter" value="${/counter + 1}" />

                <Log type="INFO" message="${/fetched_events_number} events for were fetched for '${/report_type}'." />

                <!-- If there were any events, post them and update the risingValue timer to the latest one. -->
                <If condition="${/fetched_events_number} > 0">
                    <Log type="INFO" message="Posting fetched events..." />

                    <PostEvents path="/report_events" source="${/identifier}" />

                    <Initialize path="/time_format" value="yyyy-MM-dd'T'HH:mm:ss[.SSS]'Z'" />

                    <!-- Update the risingValue for next run. -->
                    <ParseDate pattern="${/time_format}" timeZone="${/time_zone}" date="${max(/report_events/risingValue)}" savePath="/last_risingValue_${/report_type}" />
                    <FormatDate pattern="${/time_format}" timeZone="${/time_zone}" time="${/last_risingValue_${/report_type}}" savePath="/risingValue_${/report_type}" />
                    <ParseDate pattern="${/time_format}" timeZone="${/time_zone}" date="${/risingValue_${/report_type}}" savePath="/risingValue_${/report_type}" />

                    <Log type="INFO" message="'risingValue' time for '${/report_type}' updated to: ${/risingValue_${/report_type}}" />
                </If>
            </DoWhile>

            <Log type="INFO" message="Done fetching events for '${/report_type}'. Total time in milliseconds is: ${time() - /individual_start_time}" />
        </ForEach>

        <Log type="INFO" message="Done fetching events. Total time in milliseconds is: ${time() - /total_start_time}" />
	</Actions>

    <Tests>
        <DNSResolutionTest host="${/hostname}" />
        <TCPConnectionTest host="${/hostname}" />
        <HTTPConnectionThroughProxyTest url="${/hostname}" expectedResponseStatus="404" />
    </Tests>
</Workflow>
